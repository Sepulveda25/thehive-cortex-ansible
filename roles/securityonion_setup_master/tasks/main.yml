---

- name: Check if {{ MGMT_INTERFACE }} exist
  fail:
    msg: "Interface {{ MGMT_INTERFACE }} no existe "
  failed_when: not (ansible_interfaces | intersect(MGMT_INTERFACE))

- name: Create a file named ansible.{random}.conf
  tempfile:
    state:  file
    suffix: .conf
  register: temp_config
  
- name: Copy content sosetup_forward.conf in "{{ temp_config.path }}"
  copy:
    src:  sosetup_forward.conf #from files folder in this role
    dest: "{{ temp_config.path }}"
    
- name: Remplazo variables de host_vars en el config para el forward
  lineinfile: 
   path: "{{ temp_config.path }}"
   regexp:  "{{ item.regexp }}"
   line: "{{ item.line }}"
  with_items:
   - {regexp: '^MGMT_INTERFACE=', line: "MGMT_INTERFACE='{{ MGMT_INTERFACE }}'"}
   - {regexp: '^MGMT_CONFIG_TYPE=', line: "MGMT_CONFIG_TYPE='{{ MGMT_CONFIG_TYPE }}'"}
   - {regexp: '^ADDRESS=', line: "ADDRESS='{{ ADDRESS }}'"}
   - {regexp: '^NETMASK=', line: "NETMASK='{{ NETMASK }}'"}
   - {regexp: '^GATEWAY=', line: "GATEWAY='{{ GATEWAY }}'"}
   - {regexp: '^NAMESERVER=', line: "NAMESERVER='{{ NAMESERVER }}'"}
   - {regexp: '^DOMAIN=', line: "DOMAIN='{{ DOMAIN }}'"}
   - {regexp: '^LOG_SIZE_LIMIT=', line: "LOG_SIZE_LIMIT='{{ LOG_SIZE_LIMIT }}'"}
   - {regexp: '^IDS_RULESET=', line: "IDS_RULESET='{{ IDS_RULESET }}'"}
   - {regexp: '^IDS_ENGINE=', line: "IDS_ENGINE='{{ IDS_ENGINE }}'"}
   - {regexp: '^WARN_DISK_USAGE=', line: "WARN_DISK_USAGE='{{ WARN_DISK_USAGE }}'"}
   - {regexp: '^CRIT_DISK_USAGE=', line: "CRIT_DISK_USAGE='{{ CRIT_DISK_USAGE }}'"}
   - {regexp: '^DAYSTOKEEP=', line: "DAYSTOKEEP='{{ DAYSTOKEEP }}'"}
   - {regexp: '^DAYSTOREPAIR=', line: "DAYSTOREPAIR='{{ DAYSTOREPAIR }}'"}

- name: Print path temp file "{{ temp_config.path }}"
  debug:
    msg: "{{ temp_config.path }}"

- name: Execute sosetup for master
  include_role:
    name: securityonion_run_sosetup
  vars:
    sosetupfilepath: "{{ temp_config.path }}"

- name: Install telegraf
  include_role:
    name: telegraf_install

- name: Copy classification.config in /etc/nsm/rules/ (backup)
  become: yes
  become_user: root
  copy:
    src: "{{ role_path }}/files/clasiffication_rules/classification.config" #from files folder roles"
    dest: /etc/nsm/rules/classification.config
    backup: yes
    mode: 'preserve' #preserve permissions

- name: Copy TheHive Rules in /etc/elastalert/rules
  become: yes
  become_user: root
  copy:
    src: "{{ role_path }}/files/thehive_rules/" #from files folder roles"
    dest: /etc/elastalert/rules/

- name: Reboot machine
  become: yes
  become_user: root
  reboot:
    reboot_timeout: 1000
